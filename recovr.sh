#!/bin/bash

# üéØ RecovR Lost & Found System - Script de gestion principal
# Un seul script pour tout g√©rer facilement

echo "üéØ RecovR Lost & Found System"
echo "============================="
echo ""

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}$1${NC}"
}

log_success() {
    echo -e "${GREEN}$1${NC}"
}

log_warning() {
    echo -e "${YELLOW}$1${NC}"
}

log_error() {
    echo -e "${RED}$1${NC}"
}

# Afficher le menu
show_menu() {
    echo "üéõÔ∏è  Que souhaitez-vous faire ?"
    echo ""
    echo "1) üöÄ D√©marrer tous les services (Front + Back + Python)"
    echo "2) üõë Arr√™ter tous les services"
    echo "3) üìä Surveiller les services"
    echo "4) üîÑ Red√©marrer compl√®tement (arr√™t + nettoyage + d√©marrage)"
    echo "5) üìã Statut rapide des services"
    echo "6) üìù Voir les logs en temps r√©el"
    echo "7) üßπ Nettoyage complet (cache, builds, logs)"
    echo "8) ‚ùì Aide et informations"
    echo "9) üö™ Quitter"
    echo ""
}

# Statut rapide
quick_status() {
    log_info "üîç Statut rapide des services..."
    echo ""
    
    # Frontend
    if curl -s --max-time 3 http://localhost:3000 &>/dev/null; then
        log_success "‚úÖ Frontend (3000) - Actif"
    else
        log_error "‚ùå Frontend (3000) - Inactif"
    fi
    
    # Backend
    if curl -s --max-time 3 http://localhost:8082/api/test &>/dev/null; then
        log_success "‚úÖ Backend (8082) - Actif"
    else
        log_error "‚ùå Backend (8082) - Inactif"
    fi
    
    # Python API
    if curl -s --max-time 3 http://localhost:5002/health &>/dev/null; then
        log_success "‚úÖ Python API (5002) - Actif"
    else
        log_error "‚ùå Python API (5002) - Inactif"
    fi
    
    echo ""
    log_info "üíª Application web: http://localhost:3000"
}

# Logs en temps r√©el
show_live_logs() {
    echo ""
    echo "üìù Logs en temps r√©el - Choisissez le service:"
    echo "1) Frontend (Next.js)"
    echo "2) Backend (Spring Boot)"
    echo "3) Python API (D√©tection)"
    echo "4) Tous les logs"
    echo ""
    
    read -p "Votre choix (1-4): " log_choice
    
    case $log_choice in
        1)
            if [ -f "logs/frontend.log" ]; then
                log_info "üì± Logs Frontend (Ctrl+C pour arr√™ter):"
                tail -f logs/frontend.log
            else
                log_error "Fichier de log frontend introuvable"
            fi
            ;;
        2)
            if [ -f "logs/backend.log" ]; then
                log_info "üü¢ Logs Backend (Ctrl+C pour arr√™ter):"
                tail -f logs/backend.log
            else
                log_error "Fichier de log backend introuvable"
            fi
            ;;
        3)
            if [ -f "logs/python-api.log" ]; then
                log_info "üêç Logs Python API (Ctrl+C pour arr√™ter):"
                tail -f logs/python-api.log
            else
                log_error "Fichier de log Python API introuvable"
            fi
            ;;
        4)
            log_info "üìä Tous les logs (Ctrl+C pour arr√™ter):"
            if command -v multitail &> /dev/null; then
                multitail logs/frontend.log logs/backend.log logs/python-api.log
            else
                log_warning "multitail non install√©, affichage s√©quentiel:"
                tail -f logs/*.log
            fi
            ;;
        *)
            log_error "Choix invalide"
            ;;
    esac
}

# Nettoyage complet
clean_all() {
    log_warning "üßπ Nettoyage complet du syst√®me..."
    
    # Arr√™ter les services d'abord
    log_info "Arr√™t des services..."
    ./stop_all_services.sh
    
    # Nettoyer les caches
    log_info "Nettoyage des caches..."
    rm -rf .next node_modules/.cache
    rm -rf spring-backend/target
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null
    find . -name "*.pyc" -delete 2>/dev/null
    
    # Nettoyer les logs anciens
    log_info "Nettoyage des logs anciens..."
    rm -rf logs/*.log
    
    log_success "‚úÖ Nettoyage termin√©!"
}

# Aide
show_help() {
    echo ""
    log_info "‚ùì AIDE - RecovR Lost & Found System"
    echo "===================================="
    echo ""
    echo "üèóÔ∏è  ARCHITECTURE:"
    echo "   ‚Ä¢ Frontend: Next.js (Port 3000)"
    echo "   ‚Ä¢ Backend: Spring Boot (Port 8082)" 
    echo "   ‚Ä¢ Python API: Detection IA (Port 5002)"
    echo ""
    echo "üìÅ STRUCTURE DES FICHIERS:"
    echo "   ‚Ä¢ ./logs/ - Logs des services"
    echo "   ‚Ä¢ ./spring-backend/ - API Java"
    echo "   ‚Ä¢ ./python-detection/ - Service IA"
    echo "   ‚Ä¢ app/, components/, lib/ - Frontend Next.js"
    echo ""
    echo "üîß SCRIPTS DISPONIBLES:"
    echo "   ‚Ä¢ ./recovr.sh - Ce script principal"
    echo "   ‚Ä¢ ./start_all_services.sh - D√©marrage complet"
    echo "   ‚Ä¢ ./stop_all_services.sh - Arr√™t complet"
    echo "   ‚Ä¢ ./monitor_services.sh - Surveillance avanc√©e"
    echo ""
    echo "üåê URLS D'ACC√àS:"
    echo "   ‚Ä¢ Application: http://localhost:3000"
    echo "   ‚Ä¢ API Backend: http://localhost:8082/api/"
    echo "   ‚Ä¢ API Python: http://localhost:5002/"
    echo ""
    echo "üõ†Ô∏è  D√âPANNAGE:"
    echo "   ‚Ä¢ V√©rifier les logs: ./recovr.sh puis option 6"
    echo "   ‚Ä¢ Ports occup√©s: sudo lsof -i:3000,8082,5002"
    echo "   ‚Ä¢ Red√©marrage complet: ./recovr.sh puis option 4"
    echo ""
}

# Boucle principale
while true; do
    show_menu
    read -p "Votre choix (1-9): " choice
    echo ""
    
    case $choice in
        1)
            log_info "üöÄ D√©marrage de tous les services..."
            ./start_all_services.sh
            ;;
        2)
            log_info "üõë Arr√™t de tous les services..."
            ./stop_all_services.sh
            ;;
        3)
            log_info "üìä Lancement de la surveillance..."
            ./monitor_services.sh
            ;;
        4)
            log_warning "üîÑ Red√©marrage complet du syst√®me..."
            ./stop_all_services.sh
            sleep 3
            clean_all
            sleep 2
            ./start_all_services.sh
            ;;
        5)
            quick_status
            ;;
        6)
            show_live_logs
            ;;
        7)
            clean_all
            ;;
        8)
            show_help
            ;;
        9)
            log_info "üëã Au revoir!"
            exit 0
            ;;
        *)
            log_error "‚ùå Choix invalide. Veuillez choisir entre 1 et 9."
            ;;
    esac
    
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    clear
done