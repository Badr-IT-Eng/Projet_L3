#!/bin/bash

# üìä Script de surveillance pour RecovR Lost & Found System
# Surveille l'√©tat des services en temps r√©el

echo "üìä RecovR System - Surveillance des services"
echo "============================================"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour v√©rifier un service
check_service() {
    local url=$1
    local name=$2
    local port=$3
    
    if curl -s --max-time 5 $url &>/dev/null; then
        log_success "$name (Port $port) - Op√©rationnel"
        return 0
    else
        log_error "$name (Port $port) - Non accessible"
        return 1
    fi
}

# Fonction pour v√©rifier les processus
check_processes() {
    echo ""
    log_info "üîç V√©rification des processus..."
    
    # Frontend
    if pgrep -f "next dev" &>/dev/null; then
        log_success "Frontend Next.js - Processus actif"
    else
        log_error "Frontend Next.js - Processus non trouv√©"
    fi
    
    # Backend
    if pgrep -f "spring-boot" &>/dev/null; then
        log_success "Backend Spring Boot - Processus actif"
    else
        log_error "Backend Spring Boot - Processus non trouv√©"
    fi
    
    # Python API
    if pgrep -f "strict_detection_api" &>/dev/null; then
        log_success "API Python - Processus actif"
    else
        log_error "API Python - Processus non trouv√©"
    fi
}

# Fonction pour afficher les statistiques des ports
check_ports() {
    echo ""
    log_info "üîå V√©rification des ports..."
    
    for port in 3000 8082 5002; do
        if lsof -i:$port &>/dev/null; then
            local process=$(lsof -i:$port | tail -n 1 | awk '{print $1}')
            log_success "Port $port - Occup√© par $process"
        else
            log_error "Port $port - Libre (service non d√©marr√©)"
        fi
    done
}

# Fonction pour afficher les logs r√©cents
show_recent_logs() {
    echo ""
    log_info "üìù Logs r√©cents (derni√®res 5 lignes)..."
    
    if [ -f "logs/frontend.log" ]; then
        echo ""
        echo "üé® Frontend:"
        tail -n 5 logs/frontend.log
    fi
    
    if [ -f "logs/backend.log" ]; then
        echo ""
        echo "üü¢ Backend:"
        tail -n 5 logs/backend.log
    fi
    
    if [ -f "logs/python-api.log" ]; then
        echo ""
        echo "üêç Python API:"
        tail -n 5 logs/python-api.log
    fi
}

# Fonction de surveillance continue
monitor_continuous() {
    log_info "üîÑ Surveillance continue activ√©e (Ctrl+C pour arr√™ter)"
    echo ""
    
    while true; do
        clear
        echo "üìä RecovR System - Surveillance en temps r√©el"
        echo "=============================================="
        echo "$(date '+%Y-%m-%d %H:%M:%S')"
        echo ""
        
        # V√©rifier les services
        log_info "üåê √âtat des services web:"
        check_service "http://localhost:3000" "Frontend Next.js" "3000"
        check_service "http://localhost:8082/api/test" "Backend Spring Boot" "8082"
        check_service "http://localhost:5002/health" "API Python" "5002"
        
        # V√©rifier les processus
        check_processes
        
        # V√©rifier les ports
        check_ports
        
        echo ""
        echo "‚è±Ô∏è  Prochaine v√©rification dans 10 secondes..."
        echo "üõë Appuyez sur Ctrl+C pour arr√™ter la surveillance"
        
        sleep 10
    done
}

# Menu principal
echo ""
echo "Que souhaitez-vous faire ?"
echo "1) V√©rification unique des services"
echo "2) Surveillance continue"
echo "3) Afficher les logs r√©cents"
echo "4) Red√©marrer un service sp√©cifique"
echo "5) Quitter"
echo ""

read -p "Votre choix (1-5): " choice

case $choice in
    1)
        echo ""
        log_info "üîç V√©rification unique des services..."
        
        check_service "http://localhost:3000" "Frontend Next.js" "3000"
        check_service "http://localhost:8082/api/test" "Backend Spring Boot" "8082" 
        check_service "http://localhost:5002/health" "API Python" "5002"
        
        check_processes
        check_ports
        ;;
        
    2)
        monitor_continuous
        ;;
        
    3)
        show_recent_logs
        ;;
        
    4)
        echo ""
        echo "Quel service red√©marrer ?"
        echo "1) Frontend (Next.js)"
        echo "2) Backend (Spring Boot)"
        echo "3) API Python"
        echo ""
        
        read -p "Votre choix (1-3): " service_choice
        
        case $service_choice in
            1)
                log_info "üîÑ Red√©marrage du Frontend..."
                pkill -f "next dev"
                sleep 3
                nohup npm run dev > logs/frontend.log 2>&1 &
                log_success "Frontend red√©marr√©"
                ;;
            2)
                log_info "üîÑ Red√©marrage du Backend..."
                pkill -f "spring-boot"
                sleep 5
                cd spring-backend
                nohup ./mvnw spring-boot:run > ../logs/backend.log 2>&1 &
                cd ..
                log_success "Backend red√©marr√©"
                ;;
            3)
                log_info "üîÑ Red√©marrage de l'API Python..."
                pkill -f "strict_detection_api"
                sleep 3
                cd python-detection
                nohup python3 strict_detection_api.py > ../logs/python-api.log 2>&1 &
                cd ..
                log_success "API Python red√©marr√©e"
                ;;
            *)
                log_error "Choix invalide"
                ;;
        esac
        ;;
        
    5)
        log_info "Au revoir! üëã"
        exit 0
        ;;
        
    *)
        log_error "Choix invalide"
        exit 1
        ;;
esac

echo ""
log_info "Surveillance termin√©e. Services RecovR en cours d'ex√©cution."